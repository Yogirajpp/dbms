
----------------------------------------------------------------------------------
(Questions)
Q1)
var mapFunction = function() {
 emit(this.company_name, this.salary);
 };
var reduceFunction = function(key, values) {
 return Array.sum(values);
 };
db.employee.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: "total_salary_per_company"
 }
 );
DeprecationWarning: Collection.mapReduce() is deprecated. Use an aggregation
instead.
See https://docs.mongodb.com/manual/core/map-reduce for details.
{ result: 'total_salary_per_company', ok: 1 }
b1> db.total_salary_per_company.find();
[
 { _id: null, value: 50000 },
 { _id: 'amazon', value: 80000 },
 { _id: 'TCS', value: 14000 },
 { _id: 'infosys', value: 100000 }
]
---------------------------------------------------------------------------------

Q2)

var mapFunction = function() {
 if (this.company_name === "TCS") {
 emit(this.company_name, this.salary);
 }
 };

var reduceFunction = function(key, values) {
 return Array.sum(values);
 };

db.employee.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: { inline: 1 },
 query: { company_name: "TCS" }
 }
 );
{ results: [ { _id: 'TCS', value: 14000 } ], ok: 1 }
----------------------------------------------------------------------------------

Q3)

var mapFunction = function() {
 if (this.address === "Pune") {
 emit(this.company_name, this.salary);
 }
 };


var reduceFunction = function(key, values) {
 var reducedVal = {
 totalSalary: 0,
 count: 0
 };
 values.forEach(function(value) {
 reducedVal.totalSalary += value;
 reducedVal.count += 1;
 });
 return reducedVal;
 };


var finalizeFunction = function(key, reducedVal) {
 return reducedVal.totalSalary / reducedVal.count;
 };


db.employee.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: "average_salary_per_company",
 finalize: finalizeFunction,
 query: { address: "Pune" }
 }
 );
{ result: 'average_salary_per_company', ok: 1 }
practical> db.average_salary_per_company.find()
[
{ _id: 'amazon', value: 80000 },
{ _id: 'infosys', value: 30000 },
{ _id: 'tcs', value: 12000 }
]

-----------------------------------------------------------------------


Q4)

var mapFunction = function() {
 if (this.company_name === "Infosys") {
 emit(this.designation, this.salary);
 }
 };


var reduceFunction = function(key, values) {
 return Array.sum(values);
 };


db.employee.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: "total_salary_per_designation",
 query: { company_name: "Infosys" }
 }
 );
{ result: 'total_salary_per_designation', ok: 1 }
---------------------------------------------------------------------------------

Q5)

var mapFunction = function() {
 if (this.State === "AP") {
 emit("count", 1);
 }
 };


var reduceFunction = function(key, values) {
 return Array.sum(values);
 };


db.collection_name.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: { inline: 1 },
 query: { State: "AP" }
 }
 );
{ results: [], ok: 1 }
---------------------------------------------------------------------
Q6)
 
var mapFunction = function() {
 if (this.State === "AP" && this.Age > 40) {
 emit("count", 1);
 }
 };

var reduceFunction = function(key, values) {
 return Array.sum(values);
 };

db.collection_name.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: { inline: 1 },
 query: { State: "AP", Age: { lection_name.mapReduce(
 mapFunction,
 reduceFunction,
 {
 out: { inline: 1 },
 query: { State: "AP", Age: { $gt: 40 } }
 }
 );

db.emp.mapReduce(mapFunction6,reduceFunction6,{out:'AP_count_with_age_gt_40'})
{ result: 'AP_count_with_age_gt_40', ok: 1 }
practical> db.AP_count_with_age_gt_40.find()
[ { _id: 'count', value: 1 } ]


---------------------------------------------------------------------------------
(part B)


Q1)

var mapFunction = function() {
... emit(this.cust_id, this.price);
... };


var reduceFunction = function(key, values) {
... return Array.sum(values);
... };

db.orders.mapReduce(
... mapFunction,
... reduceFunction,
... {
... out: "total_price_per_customer"
... }
... );
DeprecationWarning: Collection.mapReduce() is deprecated. Use an aggregation
instead.
See https://docs.mongodb.com/manual/core/map-reduce for details.
{ result: 'total_price_per_customer', ok: 1 }
map2> db.total_price_per_customer.find();
[
 { _id: 'Ant O. Knee', value: 95 },
 { _id: 'Cam Elot', value: 60 },
 { _id: 'Don Quis', value: 155 },
 { _id: 'Busby Bee', value: 125 }
]
---------------------------------------------------------------------------------
Q2)

var mapFunction = function() {
... for (var i = 0; i < this.items.length; i++) {
... var item = this.items[i];
... emit(item.sku, { quantity: item.qty, price: item.price });
... }
... };


var reduceFunction = function(key, values) {
... var reducedVal = { quantity: 0, price: 0 };
... values.forEach(function(value) {
... reducedVal.quantity += value.quantity;
... reducedVal.price += value.price;
... });
... return reducedVal;
... };


var finalizeFunction = function(key, reducedVal) {
... reducedVal.avgQuantityPerItem = reducedVal.quantity / reducedVal.price;
... return reducedVal;
... };

db.orders.mapReduce(
... mapFunction,
... reduceFunction,
... {
... out: "total_quantity_price_avg",
... }
... );
{ result: 'total_quantity_price_avg', ok: 1 }


db.total_quantity_price_avg.find();
[
 { _id: 'pears', value: { quantity: 10, price: 2.5 } },
 { _id: 'oranges', value: { quantity: 63, price: 17.5 } },
 { _id: 'apples', value: { quantity: 35, price: 10 } },
 { _id: 'carrots', value: { quantity: 15, price: 2 } },
 { _id: 'chocolates', value: { quantity: 15, price: 30 } }
]
----------------------------------------------------------------------------------